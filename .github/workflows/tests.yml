---
name: Run Tests

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  release:
    types: [released]
env:
  IS_GITHUB_ACTION: 1

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ["3.10"]


    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: pip install .[tests]

      - name: Install Qt Dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install ffmpeg
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ffmpeg
          elif [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update -y
          sudo apt install libxcb-icccm4 libxcb-image0 libxcb-keysyms1 \
                           libxkbcommon-x11-0 xvfb libxcb-randr0 \
                           libxcb-render-util0 libxcb-xinerama0 libegl1 \
                           libxcb-shape0
          sudo apt-get install -y libgles2-mesa-dev
          fi

      - name: Run tests
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            poetry run make test
          elif [ "$RUNNER_OS" == "Linux" ]; then
            poetry run xvfb-run make test
          fi


      - name: Codecov
        uses: codecov/codecov-action@v3.1.1


  publish:
    runs-on: ubuntu-latest
    needs: [tests]
    if: ${{ needs.lint.result == 'success' &&
      needs.tests.result == 'success' &&
      github.event.action == 'published' }}

    steps:
      - uses: actions/checkout@v2
      - name: Build and publish to pypi
        uses: JRubics/poetry-publish@v1.16
        with:
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}
